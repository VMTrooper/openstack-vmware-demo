heat_template_version: 2015-04-30

description: >
  This HOT contains the infrastructure definition for Acme application. The following components are configured:
    * Neutron LBaaS (NSX Load Balancer)
    * Neutron Router (NSX Edge)
    * Neutron Networks (NSX Logical Switches)
    * Neutron Security Groups (NSX SG)
    * Nova Servers (VMware vSphere Virtual Machines)
    * Nova Server Groups (DRS Anti-affinity Policies)
    * Nova Flavors (VMware vSphere Reservations and SPBM)

parameters:
  external_network_id:
    type: string
    label: Provider Network UUID
    description: Provider network UUID
    default: 77d01cc3-1e96-4d6b-a9d7-49738164c821

resources:
#Network Infrastructure
    web_net:
      type: OS::Neutron::Net

    web_subnet:
      type: OS::Neutron::Subnet
      properties:
        network_id: { get_resource: web_net }
        cidr: "30.0.0.0/24"
        dns_nameservers: [ "10.20.20.1", "10.20.20.2" ]
        ip_version: 4

    app_net:
      type: OS::Neutron::Net

    app_subnet:
      type: OS::Neutron::Subnet
      properties:
        network_id: { get_resource: app_net }
        cidr: "40.0.0.0/24"
        dns_nameservers: [ "10.20.20.1", "10.20.20.2" ]
        ip_version: 4

    db_net:
      type: OS::Neutron::Net

    db_subnet:
      type: OS::Neutron::Subnet
      properties:
        network_id: { get_resource: db_net }
        cidr: "50.0.0.0/24"
        dns_nameservers: [ "10.20.20.1", "10.20.20.2" ]
        ip_version: 4

    # Create security groups for the tiers.
    db_security_group:
      type: OS::Neutron::SecurityGroup
      properties:
        description: Allow sql traffic from web tier
        name: db-security-group
        rules:
          - remote_ip_prefix: { get_attr: [ app_subnet, cidr ] }
            protocol: tcp
            port_range_min: 3306
            port_range_max: 3306

    web_security_group:
      type: OS::Neutron::SecurityGroup
      properties:
        description: Allow web traffic from anywhere
        name: web-security-group
        rules:
          - remote_ip_prefix: 0.0.0.0/0
            protocol: tcp
            port_range_min: 80
            port_range_max: 80
          - remote_ip_prefix: 0.0.0.0/0
            protocol: tcp
            port_range_min: 22
            port_range_max: 22

    app_security_group:
      type: OS::Neutron::SecurityGroup
      properties:
        description: Allow app traffic from web tier
        name: app-security-group
        rules:
          - remote_ip_prefix: { get_attr: [ web_subnet, cidr ] }
            protocol: tcp
            port_range_min: 8443
            port_range_max: 8443

    # Create port(s) on app switch.
    web-01_port0:
      type: OS::Neutron::Port
      properties:
        network_id: { get_resource: web_net }
        security_groups:
          - { get_resource: web_security_group }
    web-02_port0:
      type: OS::Neutron::Port
      properties:
        network_id: { get_resource: web_net }
        security_groups:
          - { get_resource: web_security_group }

    # Create port(s) on app switch.
    app-01_port0:
      type: OS::Neutron::Port
      properties:
        network_id: { get_resource: app_net }
        security_groups:
          - { get_resource: app_security_group }
    app-02_port0:
      type: OS::Neutron::Port
      properties:
        network_id: { get_resource: app_net }
        security_groups:
          - { get_resource: app_security_group }

    # Create port(s) on db switch.
    db-01_port0:
      type: OS::Neutron::Port
      properties:
        network_id: { get_resource: db_net }
        security_groups:
          - { get_resource: db_security_group }
    db-02_port0:
      type: OS::Neutron::Port
      properties:
        network_id: { get_resource: db_net }
        security_groups:
          - { get_resource: db_security_group }

#Create Router
    acme_router:
      type: OS::Neutron::Router
      properties:
        external_gateway_info: { network: EXTNET }
        value_specs:
          { "router_type": "exclusive" }
    acme_router_web:
      type: OS::Neutron::RouterInterface
      properties:
        router_id: { get_resource: acme_router }
        subnet: { get_resource: web_subnet }
    acme_router_app:
      type: OS::Neutron::RouterInterface
      properties:
        router_id: { get_resource: acme_router }
        subnet: { get_resource: app_subnet }
    acme_router_db:
      type: OS::Neutron::RouterInterface
      properties:
        router_id: { get_resource: acme_router }
        subnet: { get_resource: db_subnet }

#Compute Infrastructure
  #Anti-affinity Server Groups
    web-server-farm:
      type: OS::Nova::ServerGroup
      properties:
        name: "web-server-farm"
        policies: [anti-affinity]

    app-server-farm:
      type: OS::Nova::ServerGroup
      properties:
        name: "app-server-farm"
        policies: [anti-affinity]

    db-server-farm:
      type: OS::Nova::ServerGroup
      properties:
        name: "db-server-farm"
        policies: [anti-affinity]
  
  # #Performance Flavors - The Nova::Flavor resource is a Liberty Feature
  #   web-performance:
  #     type: OS::Nova::Flavor
  #     properties:
  #       ram: 2048
  #       vcpus: 1
  #       disk: 20
  #       extra_specs: { "quota:vif_reservation": "300" }
  #   app-performance:
  #     type: OS::Nova::Flavor
  #     properties:
  #       ram: 2048
  #       vcpus: 1
  #       disk: 20
  #       extra_specs: { "quota:cpu_reservation": "1024" }

  #Create Instances
    jumpbox:
      type: OS::Nova::Server
      properties:
        name: jumpbox
        image: windows-2012-r2-ova
        flavor: m1.medium
        networks:
          - network: { get_resource: web_net }

    web-01:
      type: OS::Nova::Server
      properties:
        name: web-server-01
        image: ubuntu-14.04-server-amd64
        flavor: web-performance
        # flavor: { get_resource: web-performance }
        networks:
          - port: { get_resource: web-01_port0 }
        scheduler_hints: { group: { get_resource: web-server-farm } }
        user_data_format: RAW
        user_data: |
          #!/bin/bash -ex
          touch /home/ubuntu/index.html
          export local_ip=$(ifconfig eth0|grep 'inet addr'|awk -F: '{print $2}'| awk '{print $1}')
          echo "You are connected to <b>$HOSTNAME</b> at <b>$local_ip</b>" >> /home/ubuntu/index.html
          cd /home/ubuntu; sudo python -m SimpleHTTPServer 80 &
    web-02:
      type: OS::Nova::Server
      properties:
        name: web-server-02
        image: ubuntu-14.04-server-amd64
        flavor: web-performance
        networks:
          - port: { get_resource: web-02_port0 }
        scheduler_hints: { group: { get_resource: web-server-farm } }
        user_data_format: RAW
        user_data: |
          #!/bin/bash -ex
          touch /home/ubuntu/index.html
          export local_ip=$(ifconfig eth0|grep 'inet addr'|awk -F: '{print $2}'| awk '{print $1}')
          echo "You are connected to <b>$HOSTNAME</b> at <b>$local_ip</b>" >> /home/ubuntu/index.html
          cd /home/ubuntu; sudo python -m SimpleHTTPServer 80 &

    app-01:
      type: OS::Nova::Server
      properties:
        name: app-server-01
        image: ubuntu-14.04-server-amd64
        flavor: app-performance
        networks:
          - port: { get_resource: app-01_port0 }
        scheduler_hints: { group: { get_resource: app-server-farm } }
    app-02:
      type: OS::Nova::Server
      properties:
        name: app-server-02
        image: ubuntu-14.04-server-amd64
        flavor: app-performance
        networks:
          - port: { get_resource: app-02_port0 }
        scheduler_hints: { group: { get_resource: app-server-farm } }

    db-01:
      type: OS::Nova::Server
      properties:
        name: db-server-01
        image: ubuntu-14.04-server-amd64
        flavor: db-performance
        networks:
          - port: { get_resource: db-01_port0 }
        scheduler_hints: { group: { get_resource: db-server-farm } }
    db-02:
      type: OS::Nova::Server
      properties:
        name: db-server-02
        image: ubuntu-14.04-server-amd64
        flavor: db-performance
        networks:
          - port: { get_resource: db-02_port0 }
        scheduler_hints: { group: { get_resource: db-server-farm } }

#Network Services
#Create Load balancer here
    monitor:
      type: OS::Neutron::HealthMonitor
      properties:
        type: TCP
        delay: 10
        max_retries: 5
        timeout: 10

    pool:
      type: OS::Neutron::Pool
      depends_on:
        - web_subnet
      properties:
        protocol: HTTP
        monitors:
          - { get_resource: monitor }
        subnet: { get_resource: web_subnet}
        lb_method: ROUND_ROBIN
        vip:
          protocol_port: 80

    lb:
      type: OS::Neutron::LoadBalancer
      properties:
        members: [ { get_resource: web-01 }, { get_resource: web-02 } ]
        protocol_port: 80
        pool_id: { get_resource: pool }

    lb_floating:
      type: OS::Neutron::FloatingIP
      properties:
        floating_network_id: { get_param: external_network_id }
        port_id: { get_attr: [ pool, vip, port_id ] }